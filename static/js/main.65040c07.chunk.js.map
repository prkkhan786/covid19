{"version":3,"sources":["components/CovidData.jsx","components/GlobalCard.jsx","components/globalDisplay.jsx","components/UIspinner.jsx","components/Footer.jsx","App.js","config/constants.js","serviceWorker.js","index.js"],"names":["CovidData","props","coviddata","sortData","onsort","dataType","onClickHandler","onclickhandler","console","log","className","style","background","color","scope","onClick","class","map","data","i","key","Country","cursor","state","NewConfirmed","width","fontSize","display","TotalConfirmed","cChanges","confirmed","TotalRecovered","TotalDeaths","active","NewRecovered","rChanges","recovered","NewDeaths","dChanges","deaths","Card","value","title","newdata","colorclass","height","padding","paddingTop","margin","GlobalDisplay","globalPlace","place","textAlign","justifyContent","flexWrap","UIspinner","position","top","left","role","Footer","align","right","href","fontWeight","App","useState","conviddata","setcoviddata","globalData","setGlobalData","indiadata","setIndiadata","statesdata","setStatesdata","bardata","setbardata","date","setdate","selectedStateData","setselectedStatedata","selectedStateName","setselectedStateName","loading","isloading","orderBy","setorderby","useEffect","getdataFromApi","labels","datasets","label","backgroundColor","borderColor","borderWidth","selectedState","a","Promise","all","axios","get","statewise","Countries","Date","globaldata","Global","indaData","find","ele","indiadataFrorBar","push","handleSort","path","type","newData","sorted","_","animationDelay","borderBottom","marginBottom","overflow","marginTop","selecteStateData","options","text","legend","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.65040c07.chunk.js","sourcesContent":["import React from \"react\";\nexport default function CovidData(props) {\n  const coviddata = props.coviddata;\n  const sortData = props.onsort;\n  const dataType = props.dataType;\n  let onClickHandler = props.onclickhandler;\n\n  if (!onClickHandler) {\n    onClickHandler = () => {\n      console.log(\"\");\n    };\n  }\n  return (\n    <div>\n      <table\n        className=\"table sortable\"\n        style={{\n          background: \"\",\n          color: \"#6c757d\",\n        }}\n      >\n        <thead>\n          <tr>\n            <th\n              scope=\"col\"\n              onClick={() =>\n                sortData(\n                  \"Country\",\n                  dataType === \"Countries\" ? \"Country\" : \"states\"\n                )\n              }\n            >\n              <i class=\"fa fa-fw fa-sort\"></i>\n              {dataType}\n            </th>\n            <th\n              scope=\"col\"\n              onClick={() =>\n                sortData(\n                  \"TotalConfirmed\",\n                  dataType === \"Countries\" ? \"Country\" : \"states\"\n                )\n              }\n            >\n              <i class=\"fa fa-fw fa-sort\"></i>\n              Confirmed\n            </th>\n            <th\n              scope=\"col\"\n              onClick={() =>\n                sortData(\n                  \"TotalConfirmed\",\n                  dataType === \"Countries\" ? \"Country\" : \"states\"\n                )\n              }\n            >\n              <i class=\"fa fa-fw fa-sort\"></i>\n              Active\n            </th>\n            <th\n              scope=\"col\"\n              onClick={() =>\n                sortData(\n                  \"TotalRecovered\",\n                  dataType === \"Countries\" ? \"Country\" : \"states\"\n                )\n              }\n            >\n              <i class=\"fa fa-fw fa-sort\"></i>\n              Recovered\n            </th>\n            <th\n              scope=\"col\"\n              onClick={() =>\n                sortData(\n                  \"TotalDeaths\",\n                  dataType === \"Countries\" ? \"Country\" : \"states\"\n                )\n              }\n            >\n              <i class=\"fa fa-fw fa-sort\"></i>\n              Deaths\n            </th>\n\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {coviddata.map((data, i) => (\n            <tr\n              key={data.Country}\n              onClick={() => onClickHandler(data)}\n              style={{ cursor: \"pointer\" }}\n            >\n              <td className=\"clickable\">\n                {dataType === \"Countries\" ? data.Country : data.state}\n              </td>\n              <td className=\"clickable\">\n                {dataType === \"Countries\" ? (\n                  <div>\n                    {data.NewConfirmed === 0 ? (\n                      <span\n                        style={{\n                          width: \"35%\",\n                          fontSize: \"smaller\",\n\n                          color: \"red\",\n                          display: \"inline-block\",\n                        }}\n                      >\n                        {\"  \"}\n                      </span>\n                    ) : (\n                      <span\n                        style={{\n                          width: \"35%\",\n                          fontSize: \"smaller\",\n                          color: \"red\",\n                          display: \"inline-block\",\n                        }}\n                        className=\"glyphicon glyphicon-arrow-up\"\n                      >\n                        {data.NewConfirmed}{\" \"}\n                      </span>\n                    )}\n                    <span style={{ display: \"block\" }}>\n                      {data.TotalConfirmed}\n                    </span>\n                  </div>\n                ) : (\n                  <div>\n                    {data.cChanges === 0 ? (\n                      <span\n                        style={{\n                          width: \"35%\",\n                          fontSize: \"smaller\",\n\n                          color: \"red\",\n                          display: \"inline-block\",\n                        }}\n                      >\n                        {\"  \"}\n                      </span>\n                    ) : (\n                      <span\n                        style={{\n                          width: \"35%\",\n                          fontSize: \"smaller\",\n                          color: \"red\",\n                          display: \"inline-block\",\n                        }}\n                        className=\"glyphicon glyphicon-arrow-up\"\n                      >\n                        {data.cChanges}{\" \"}\n                      </span>\n                    )}\n                    <span style={{ display: \"block\" }}>{data.confirmed}</span>\n                  </div>\n                )}\n              </td>\n              <td className=\"clickable\">\n                {dataType === \"Countries\" ? (\n                  <div>\n                    <span\n                      style={{\n                        width: \"35%\",\n                        fontSize: \"smaller\",\n\n                        color: \"red\",\n                        display: \"inline-block\",\n                      }}\n                    >\n                      {\"  \"}\n                    </span>\n                    <span style={{ display: \"block\" }}>\n                      {data.TotalConfirmed -\n                        (data.TotalRecovered + data.TotalDeaths)}\n                    </span>\n                  </div>\n                ) : (\n                  <div>\n                    <span\n                      style={{\n                        width: \"35%\",\n                        fontSize: \"smaller\",\n\n                        color: \"red\",\n                        display: \"inline-block\",\n                      }}\n                    >\n                      {\"  \"}\n                    </span>\n                    <span style={{ display: \"block\" }}>{data.active}</span>\n                  </div>\n                )}\n              </td>\n              <td className=\"clickable\">\n                {dataType === \"Countries\" ? (\n                  <div>\n                    {data.NewRecovered === 0 ? (\n                      <span\n                        style={{\n                          width: \"35%\",\n                          fontSize: \"smaller\",\n\n                          color: \"green\",\n                          display: \"inline-block\",\n                        }}\n                      >\n                        {\"  \"}\n                      </span>\n                    ) : (\n                      <span\n                        style={{\n                          width: \"35%\",\n                          fontSize: \"smaller\",\n                          color: \"green\",\n                          display: \"inline-block\",\n                        }}\n                        className=\"glyphicon glyphicon-arrow-up\"\n                      >\n                        {data.NewRecovered}{\" \"}\n                      </span>\n                    )}\n                    <span style={{ display: \"block\" }}>\n                      {data.TotalRecovered}\n                    </span>\n                  </div>\n                ) : (\n                  <div>\n                    {data.rChanges === 0 ? (\n                      <span\n                        style={{\n                          width: \"35%\",\n                          fontSize: \"smaller\",\n\n                          color: \"green\",\n                          display: \"inline-block\",\n                        }}\n                      >\n                        {\"  \"}\n                      </span>\n                    ) : (\n                      <span\n                        style={{\n                          width: \"35%\",\n                          fontSize: \"smaller\",\n                          color: \"green\",\n                          display: \"inline-block\",\n                        }}\n                        className=\"glyphicon glyphicon-arrow-up\"\n                      >\n                        {data.rChanges}{\" \"}\n                      </span>\n                    )}\n                    <span style={{ display: \"block\" }}>{data.recovered}</span>\n                  </div>\n                )}\n              </td>\n              <td className=\"clickable\">\n                {dataType === \"Countries\" ? (\n                  <div>\n                    {data.NewDeaths === 0 ? (\n                      <span\n                        style={{\n                          width: \"35%\",\n                          fontSize: \"smaller\",\n\n                          color: \"grey\",\n                          display: \"inline-block\",\n                        }}\n                      >\n                        {\"  \"}\n                      </span>\n                    ) : (\n                      <span\n                        style={{\n                          width: \"35%\",\n                          fontSize: \"smaller\",\n                          color: \"grey\",\n                          display: \"inline-block\",\n                        }}\n                        className=\"glyphicon glyphicon-arrow-up\"\n                      >\n                        {data.NewDeaths}{\" \"}\n                      </span>\n                    )}\n                    <span style={{ display: \"block\" }}>{data.TotalDeaths}</span>\n                  </div>\n                ) : (\n                  <div>\n                    {data.dChanges === 0 ? (\n                      <span\n                        style={{\n                          width: \"35%\",\n                          fontSize: \"smaller\",\n\n                          color: \"grey\",\n                          display: \"inline-block\",\n                        }}\n                      >\n                        {\"  \"}\n                      </span>\n                    ) : (\n                      <span\n                        style={{\n                          width: \"35%\",\n                          fontSize: \"smaller\",\n                          color: \"grey\",\n                          display: \"inline-block\",\n                        }}\n                        className=\"glyphicon glyphicon-arrow-up\"\n                      >\n                        {data.dChanges}{\" \"}\n                      </span>\n                    )}\n                    <span style={{ display: \"block\" }}>{data.deaths}</span>\n                  </div>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import React from \"react\";\nexport default function Card(props) {\n  const fontStyle = {\n    margin: \"0\",\n    padding: \"0\",\n    fontSize: \"10px\",\n  };\n\n  let { color, value, title, newdata } = props;\n  const colorclass = `card-body text-${color}`;\n  newdata = \"[+\" + newdata + \"]\";\n\n  return (\n    <div\n      className=\"card text-white border-primary mb-3\"\n      style={{ height: \"5em\", padding: \"10\" }}\n    >\n      <div className={colorclass} style={{ paddingTop: \"0\" }}>\n        <p style={{ margin: \"0\", padding: \"0\", color: \"#FF6347\" }}>{newdata}</p>\n        <p className=\"card-text\" style={{ margin: \"0\" }}>\n          {title}{\" \"}\n        </p>\n        <p className=\"card-text\" style={{ margin: \"0\" }}>\n          {value}\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Card from \"./GlobalCard\";\n\nexport default function GlobalDisplay(props) {\n  const data = props.data;\n  const globalPlace = props.place;\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <h1>{globalPlace} </h1>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          flexWrap: \"wrap\",\n        }}\n      >\n        <Card\n          color=\"primary\"\n          title=\"Confirmed\"\n          value={data.TotalConfirmed}\n          newdata={data.NewConfirmed}\n        />\n        <Card\n          color=\"danger\"\n          title=\"Deaths\"\n          value={data.TotalDeaths}\n          newdata={data.NewDeaths}\n        />\n        <Card\n          color=\"success\"\n          title=\"Recovered\"\n          value={data.TotalRecovered}\n          newdata={data.NewRecovered}\n        />\n        <Card\n          color=\"primary\"\n          title=\"Active\"\n          value={data.TotalConfirmed - data.TotalRecovered - data.TotalDeaths}\n          newdata={data.NewConfirmed - data.NewRecovered - data.NewDeaths}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nexport default function UIspinner() {\n  return (\n    <div\n      class=\"spinner-border text-primary\"\n      style={{\n        textAlign: \"center\",\n        position: \"relative\",\n        top: \"50%\",\n        left: \"50%\",\n      }}\n      role=\"status\"\n    >\n      <span class=\"sr-only\">Loading...</span>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Footer() {\n  return (\n    <div>\n      <div\n        align=\"center\"\n        className=\"socialbtns\"\n        style={{ position: \"relative\", right: \"1%\" }}\n      >\n        <ul>\n          <li>\n            <a\n              href=\"https://twitter.com/prkkhan1\"\n              className=\"fa fa-lg fa-twitter\"\n            ></a>\n          </li>\n\n          <li>\n            <a\n              href=\"https://github.com/prkkhan786\"\n              className=\"fa fa-lg fa-github\"\n            ></a>\n          </li>\n\n          <li>\n            <a\n              href=\"https://www.linkedin.com/in/parvez-khan-1b245889/\"\n              className=\"fa fa-lg fa-linkedin\"\n            ></a>\n          </li>\n          <li>\n            <a\n              href=\"https://www.instagram.com/travelwithparvez/\"\n              className=\"fa fa-lg fa-instagram\"\n            ></a>\n          </li>\n          <li>\n            <a\n              href=\"https://www.youtube.com/channel/UCbazSHWpFq-Io2PiehXY2Zw\"\n              className=\"fa fa-lg fa-youtube\"\n            ></a>\n          </li>\n        </ul>\n      </div>\n      <p style={{ fontWeight: \"bolder\" }}>Made with ❤ by Parvez khan.</p>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport CovidData from \"./components/CovidData\";\nimport _ from \"lodash\";\nimport GlobalDisplay from \"./components/globalDisplay\";\nimport axios from \"axios\";\nimport { Heading } from \"./config/constants\";\nimport { Bar } from \"react-chartjs-2\";\nimport UIspinner from \"./components/UIspinner\";\nimport Footer from \"./components/Footer\";\n\n//const API_URL = \"https://api.covid19api.com/summary\";\nconst API_URL = \"https://immense-garden-59038.herokuapp.com/\";\n//const API_URL_States = \"https://api.covidindiatracker.com/state_data.json\";\n//const API_URL_States = \"http://localhost:8081/all\";\n\nconst API_URL_States = \"https://api.covid19india.org/data.json\";\n\n//const API_URL_INDIA = \"http://covid19-india-adhikansh.herokuapp.com/summary\";\n\nfunction App() {\n  const [conviddata, setcoviddata] = useState([]);\n  const [globalData, setGlobalData] = useState({});\n  const [indiadata, setIndiadata] = useState({});\n  const [statesdata, setStatesdata] = useState([]);\n  const [bardata, setbardata] = useState([]);\n  const [date, setdate] = useState();\n  const [selectedStateData, setselectedStatedata] = useState([]);\n  const [selectedStateName, setselectedStateName] = useState(\"None\");\n  const [loading, isloading] = useState(false);\n  const [orderBy, setorderby] = useState(\"asc\");\n  useEffect(() => {\n    getdataFromApi();\n  }, []);\n\n  const state = {\n    labels: [\"Confirmed\", \"Active\", \"Recovered\", \"Deaths\"],\n    datasets: [\n      {\n        label: \"Number\",\n        backgroundColor: \"rgba(75,192,192,123)\",\n        borderColor: \"rgba(0,0,0,1)\",\n        borderWidth: 2,\n        // data: [1971, 21060, 1600],\n        data: bardata,\n      },\n    ],\n  };\n  const selectedState = {\n    labels: [\"Confirmed\", \"Active\", \"Recovered\", \"Deaths\"],\n    datasets: [\n      {\n        label: \"Number\",\n        backgroundColor: \"rgba(75,192,192,1)\",\n        borderColor: \"rgba(0,0,0,1)\",\n        borderWidth: 2,\n        // data: [1971, 21060, 1600],\n        data: selectedStateData,\n      },\n    ],\n  };\n\n  function onIndianStatesdataClickhandler(data) {\n    const selecteStateData = [];\n    selecteStateData.push(\n      data.confirmed,\n      data.active,\n      data.recovered,\n      data.deaths\n    );\n    setselectedStateName(data.state);\n    setselectedStatedata(selecteStateData);\n  }\n\n  const getdataFromApi = async () => {\n    try {\n      const [{ data: coviddata }, { data: statesdata }] = await Promise.all([\n        axios.get(API_URL),\n        axios.get(API_URL_States),\n      ]);\n      console.log(\"The states data\", statesdata.statewise);\n      console.log(\"covid data \", coviddata);\n\n      const data = coviddata.Countries;\n\n      const date = coviddata.Date;\n\n      const globaldata = coviddata.Global;\n      const indaData = data.find((ele) => ele.Country === \"India\");\n      console.log(\"india data\", indaData);\n\n      const indiadataFrorBar = [];\n      const active =\n        indaData.TotalConfirmed -\n        (indaData.TotalRecovered + indaData.TotalDeaths);\n      indiadataFrorBar.push(\n        indaData.TotalConfirmed,\n        active,\n        indaData.TotalRecovered,\n        indaData.TotalDeaths\n      );\n\n      setcoviddata(data);\n      setGlobalData(globaldata);\n      setIndiadata(indaData);\n      setdate(date);\n      setStatesdata(statesdata.statewise);\n      setbardata(indiadataFrorBar);\n      isloading(true);\n    } catch (err) {\n      // getdataFromApi();\n\n      console.log(err);\n    }\n  };\n\n  function handleSort(path, type) {\n    if (type === \"Country\") {\n      var newData = [...conviddata];\n      if (newData.path === path) {\n        let newOderBy = orderBy === \"asc\" ? \"desc\" : \"asc\";\n        setorderby(newOderBy);\n      } else {\n        newData.path = path;\n        let newOderBy = orderBy === \"asc\" ? \"desc\" : \"asc\";\n        setorderby(newOderBy);\n      }\n      const sorted = _.orderBy(newData, newData.path, orderBy);\n      setcoviddata(sorted);\n    } else {\n      newData = [...statesdata];\n      if (newData.path === path) {\n        let newOderBy = orderBy === \"asc\" ? \"desc\" : \"asc\";\n        setorderby(newOderBy);\n      } else {\n        newData.path = path;\n        let newOderBy = orderBy === \"asc\" ? \"desc\" : \"asc\";\n        setorderby(newOderBy);\n      }\n      const sorted = _.orderBy(newData, newData.path, orderBy);\n      setStatesdata(sorted);\n    }\n  }\n\n  return (\n    <div className=\"container\" style={{ animationDelay: \"1.5s\" }}>\n      <div style={{ borderBottom: \"1px solid black\", marginBottom: \"2%\" }}>\n        <h1 className=\"App display-1\">{Heading}</h1>\n        <p className=\"App\"> Last Updated : {date}</p>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-12 col-sm-5\" style={{}}>\n          {loading ? (\n            <div style={{ animationDelay: \"1.5s\" }}>\n              <GlobalDisplay data={globalData} place=\"GLOBAL\" />\n              <GlobalDisplay data={indiadata} place=\"INDIA\" />\n            </div>\n          ) : (\n            <UIspinner />\n          )}\n        </div>\n        <div className=\"col-12 col-sm-7\">\n          <div\n            style={{\n              width: \"auto\",\n              height: \"30em\",\n              overflow: \"scroll\",\n            }}\n          >\n            <CovidData\n              coviddata={conviddata}\n              onsort={handleSort}\n              dataType=\"Countries\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\" style={{ marginTop: \"5em\" }}>\n        <div className=\"col-xl-12 col-12\">\n          <h1 className=\"App display-1\" style={{ fontSize: \"6vw\" }}>\n            Indian States\n          </h1>\n        </div>\n        <div\n          className=\"col-xl-7 col-12\"\n          style={{\n            width: \"auto\",\n            height: \"30em\",\n            overflow: \"scroll\",\n          }}\n        >\n          <CovidData\n            coviddata={statesdata}\n            onsort={handleSort}\n            dataType=\"States\"\n            onclickhandler={onIndianStatesdataClickhandler}\n          />\n        </div>\n        <div className=\"col-xl-5 col-12\">\n          {isloading ? (\n            <Bar\n              data={state}\n              options={{\n                title: {\n                  display: true,\n                  text: \"India Cases \",\n                  fontSize: 20,\n                },\n                legend: {\n                  display: true,\n                  position: \"right\",\n                },\n              }}\n            />\n          ) : (\n            <UIspinner />\n          )}\n          <Bar\n            data={selectedState}\n            options={{\n              title: {\n                display: true,\n                text: selectedStateName,\n                fontSize: 20,\n              },\n              legend: {\n                display: true,\n                position: \"right\",\n              },\n            }}\n          />\n        </div>\n      </div>\n      <div\n        className=\"row\"\n        style={{ marginTop: \"5em\", position: \"relative\", left: \"0\" }}\n      >\n        <div className=\"col-12 col-xl-12 App\">\n          <Footer />\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default App;\n","export const Heading = \"COVID19\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/CovidData.jsx","components/GlobalCard.jsx","components/globalDisplay.jsx","components/UIspinner.jsx","App.js","config/constants.js","serviceWorker.js","index.js"],"names":["CovidData","props","coviddata","sortData","onsort","dataType","onClickHandler","onclickhandler","console","log","className","style","background","color","scope","onClick","map","data","i","key","Country","cursor","state","TotalConfirmed","confirmed","TotalRecovered","TotalDeaths","recovered","deaths","Card","value","title","colorclass","height","padding","margin","GlobalDisplay","globalPlace","place","textAlign","display","justifyContent","flexWrap","UIspinner","class","position","top","left","role","App","useState","conviddata","setcoviddata","globalData","setGlobalData","indiadata","setIndiadata","statesdata","setStatesdata","bardata","setbardata","date","setdate","selectedStateData","setselectedStatedata","selectedStateName","setselectedStateName","loading","isloading","useEffect","getdataFromApi","labels","datasets","label","backgroundColor","borderColor","borderWidth","selectedState","a","Promise","all","axios","get","Countries","Date","globaldata","Global","indaData","find","ele","indiadataFrorBar","active","push","handleSort","path","newData","order","sorted","_","orderBy","animationDelay","borderBottom","marginBottom","width","overflow","marginTop","fontSize","selecteStateData","options","text","legend","align","right","href","fontWeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.98b2cb49.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function CovidData(props) {\n  const coviddata = props.coviddata;\n  const sortData = props.onsort;\n  const dataType = props.dataType;\n  let onClickHandler = props.onclickhandler;\n  if (!onClickHandler) {\n    onClickHandler = () => {\n      console.log(\"\");\n    };\n  }\n  return (\n    <div>\n      <table\n        className=\"table\"\n        style={{\n          background: \"\",\n          color: \"#6c757d\",\n        }}\n      >\n        <thead>\n          <tr>\n            <th scope=\"col\" onClick={() => sortData(\"Country\")}>\n              {dataType}\n            </th>\n            <th scope=\"col\" onClick={() => sortData(\"TotalConfirmed\")}>\n              Confirmed\n            </th>\n            <th scope=\"col\" onClick={() => sortData(\"TotalConfirmed\")}>\n              Active\n            </th>\n            <th scope=\"col\" onClick={() => sortData(\"TotalRecovered\")}>\n              Recovered\n            </th>\n            <th scope=\"col\" onClick={() => sortData(\"TotalDeaths\")}>\n              Deaths\n            </th>\n\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {coviddata.map((data, i) => (\n            <tr\n              key={data.Country}\n              onClick={() => onClickHandler(data)}\n              style={{ cursor: \"pointer\" }}\n            >\n              <td className=\"clickable\">\n                {dataType === \"Countries\" ? data.Country : data.state}\n              </td>\n              <td className=\"clickable\">\n                {dataType === \"Countries\"\n                  ? data.TotalConfirmed\n                  : data.confirmed}\n              </td>\n              <td className=\"clickable\">\n                {dataType === \"Countries\"\n                  ? data.TotalConfirmed -\n                    (data.TotalRecovered + data.TotalDeaths)\n                  : data.confirmed - (data.recovered + data.deaths)}\n              </td>\n              <td className=\"clickable\">\n                {dataType === \"Countries\"\n                  ? data.TotalRecovered\n                  : data.recovered}\n              </td>\n              <td className=\"clickable\">\n                {dataType === \"Countries\" ? data.TotalDeaths : data.deaths}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import React from \"react\";\nexport default function Card(props) {\n  const fontStyle = {\n    margin: \"0\",\n    padding: \"0\",\n    fontSize: \"10px\",\n  };\n\n  const { color, value, title } = props;\n  const colorclass = `card-body text-${color}`;\n\n  return (\n    <div\n      className=\"card text-white border-primary mb-3\"\n      style={{ height: \"5em\", padding: \"10\" }}\n    >\n      <div className={colorclass}>\n        <p className=\"card-text\" style={{ margin: \"0\" }}>\n          {title}{\" \"}\n        </p>\n        <p className=\"card-text\" style={{ margin: \"0\" }}>\n          {value}\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Card from \"./GlobalCard\";\n\nexport default function GlobalDisplay(props) {\n  const data = props.data;\n  const globalPlace = props.place;\n  console.log(\"the data us \", data);\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <h1>{globalPlace} </h1>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          flexWrap: \"wrap\",\n        }}\n      >\n        <Card color=\"primary\" title=\"Confirmed\" value={data.TotalConfirmed} />\n        <Card color=\"danger\" title=\"Deaths\" value={data.TotalDeaths} />\n        <Card color=\"success\" title=\"Recovered\" value={data.TotalRecovered} />\n        <Card\n          color=\"primary\"\n          title=\"Active\"\n          value={data.TotalConfirmed - data.TotalRecovered - data.TotalDeaths}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nexport default function UIspinner() {\n  return (\n    <div\n      class=\"spinner-border text-primary\"\n      style={{\n        textAlign: \"center\",\n        position: \"relative\",\n        top: \"50%\",\n        left: \"50%\",\n      }}\n      role=\"status\"\n    >\n      <span class=\"sr-only\">Loading...</span>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport CovidData from \"./components/CovidData\";\nimport _ from \"lodash\";\nimport GlobalDisplay from \"./components/globalDisplay\";\nimport axios from \"axios\";\nimport { Heading } from \"./config/constants\";\nimport { Bar } from \"react-chartjs-2\";\nimport UIspinner from \"./components/UIspinner\";\nconst API_URL = \"https://api.covid19api.com/summary\";\nconst API_URL_States = \"https://api.covidindiatracker.com/state_data.json\";\n//const API_URL_INDIA = \"http://covid19-india-adhikansh.herokuapp.com/summary\";\n\nfunction App() {\n  const [conviddata, setcoviddata] = useState([]);\n  const [globalData, setGlobalData] = useState({});\n  const [indiadata, setIndiadata] = useState({});\n  const [statesdata, setStatesdata] = useState([]);\n  const [bardata, setbardata] = useState([]);\n  const [date, setdate] = useState();\n  const [selectedStateData, setselectedStatedata] = useState([]);\n  const [selectedStateName, setselectedStateName] = useState(\"None\");\n  const [loading, isloading] = useState(false);\n  useEffect(() => {\n    getdataFromApi();\n  }, []);\n\n  const state = {\n    labels: [\"Confirmed\", \"Active\", \"Recovered\", \"Deaths\"],\n    datasets: [\n      {\n        label: \"Number\",\n        backgroundColor: \"rgba(75,192,192,1)\",\n        borderColor: \"rgba(0,0,0,1)\",\n        borderWidth: 2,\n        // data: [1971, 21060, 1600],\n        data: bardata,\n      },\n    ],\n  };\n  const selectedState = {\n    labels: [\"Confirmed\", \"Active\", \"Recovered\", \"Deaths\"],\n    datasets: [\n      {\n        label: \"Number\",\n        backgroundColor: \"rgba(75,192,192,1)\",\n        borderColor: \"rgba(0,0,0,1)\",\n        borderWidth: 2,\n        // data: [1971, 21060, 1600],\n        data: selectedStateData,\n      },\n    ],\n  };\n\n  function onIndianStatesdataClickhandler(data) {\n    console.log(\"onclick event triggered\", data);\n    const selecteStateData = [];\n    selecteStateData.push(\n      data.confirmed,\n      data.active,\n      data.recovered,\n      data.deaths\n    );\n    setselectedStateName(data.state);\n    setselectedStatedata(selecteStateData);\n  }\n\n  const getdataFromApi = async () => {\n    try {\n      const [{ data: coviddata }, { data: statesdata }] = await Promise.all([\n        axios.get(API_URL),\n        axios.get(API_URL_States),\n      ]);\n      console.log(\"The states data\", statesdata);\n\n      const data = coviddata.Countries;\n\n      const date = coviddata.Date;\n\n      const globaldata = coviddata.Global;\n      const indaData = data.find((ele) => ele.Country === \"India\");\n      console.log(\"india data\", indaData);\n\n      const indiadataFrorBar = [];\n      const active =\n        indaData.TotalConfirmed -\n        (indaData.TotalRecovered + indaData.TotalDeaths);\n      indiadataFrorBar.push(\n        indaData.TotalConfirmed,\n        active,\n        indaData.TotalRecovered,\n        indaData.TotalDeaths\n      );\n\n      console.log(\"The pei data is \", indiadata.TotalRecovered);\n\n      setcoviddata(data);\n      setGlobalData(globaldata);\n      setIndiadata(indaData);\n      setdate(date);\n      setStatesdata(statesdata);\n      setbardata(indiadataFrorBar);\n      isloading(true);\n    } catch (err) {\n      getdataFromApi();\n\n      console.log(err);\n    }\n  };\n\n  function handleSort(path) {\n    const newData = [...conviddata];\n\n    if (newData.path === path) {\n      newData.order = newData.order === \"asc\" ? \"desc\" : \"asc\";\n    } else {\n      newData.path = path;\n      newData.order = \"desc\";\n    }\n    const sorted = _.orderBy(newData, newData.path, newData.order);\n    setcoviddata(sorted);\n  }\n\n  return (\n    <div className=\"container\" style={{ animationDelay: \"1.5s\" }}>\n      <div style={{ borderBottom: \"1px solid black\", marginBottom: \"2%\" }}>\n        <h1 className=\"App display-1\">{Heading}</h1>\n        <p className=\"App\"> Last Updated : {date}</p>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-12 col-sm-5\" style={{}}>\n          {loading ? (\n            <div style={{ animationDelay: \"1.5s\" }}>\n              <GlobalDisplay data={globalData} place=\"GLOBAL\" />\n              <GlobalDisplay data={indiadata} place=\"INDIA\" />\n            </div>\n          ) : (\n            <UIspinner />\n          )}\n        </div>\n        <div className=\"col-12 col-sm-7\">\n          <div\n            style={{\n              width: \"auto\",\n              height: \"30em\",\n              overflow: \"scroll\",\n            }}\n          >\n            <CovidData\n              coviddata={conviddata}\n              onsort={handleSort}\n              dataType=\"Countries\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\" style={{ marginTop: \"5em\" }}>\n        <div className=\"col-xl-12 col-12\">\n          <h1 className=\"App display-1\" style={{ fontSize: \"6vw\" }}>\n            Indian States\n          </h1>\n        </div>\n        <div\n          className=\"col-xl-7 col-12\"\n          style={{\n            width: \"auto\",\n            height: \"30em\",\n            overflow: \"scroll\",\n          }}\n        >\n          <CovidData\n            coviddata={statesdata}\n            onsort={handleSort}\n            dataType=\"States\"\n            onclickhandler={onIndianStatesdataClickhandler}\n          />\n        </div>\n        <div className=\"col-xl-5 col-12\">\n          {isloading ? (\n            <Bar\n              data={state}\n              options={{\n                title: {\n                  display: true,\n                  text: \"India Cases \",\n                  fontSize: 20,\n                },\n                legend: {\n                  display: true,\n                  position: \"right\",\n                },\n              }}\n            />\n          ) : (\n            <UIspinner />\n          )}\n          <Bar\n            data={selectedState}\n            options={{\n              title: {\n                display: true,\n                text: selectedStateName,\n                fontSize: 20,\n              },\n              legend: {\n                display: true,\n                position: \"right\",\n              },\n            }}\n          />\n        </div>\n      </div>\n      <div\n        className=\"row\"\n        style={{ marginTop: \"5em\", position: \"relative\", left: \"0\" }}\n      >\n        <div className=\"col-12 col-xl-12 App\">\n          <div\n            align=\"center\"\n            className=\"socialbtns\"\n            style={{ position: \"relative\", right: \"1%\" }}\n          >\n            <ul>\n              <li>\n                <a\n                  href=\"https://twitter.com/prkkhan1\"\n                  className=\"fa fa-lg fa-twitter\"\n                ></a>\n              </li>\n\n              <li>\n                <a\n                  href=\"https://github.com/prkkhan786\"\n                  className=\"fa fa-lg fa-github\"\n                ></a>\n              </li>\n\n              <li>\n                <a\n                  href=\"https://www.linkedin.com/in/parvez-khan-1b245889/\"\n                  className=\"fa fa-lg fa-linkedin\"\n                ></a>\n              </li>\n              <li>\n                <a\n                  href=\"https://www.instagram.com/travelwithparvez/\"\n                  className=\"fa fa-lg fa-instagram\"\n                ></a>\n              </li>\n              <li>\n                <a\n                  href=\"https://www.youtube.com/channel/UCbazSHWpFq-Io2PiehXY2Zw\"\n                  className=\"fa fa-lg fa-youtube\"\n                ></a>\n              </li>\n            </ul>\n          </div>\n          <p style={{ fontWeight: \"bolder\" }}>Made with ❤ by Parvez khan.</p>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default App;\n","export const Heading = \"COVID19\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}